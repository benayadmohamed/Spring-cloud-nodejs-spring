#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('serviceennodejs:server');
var http = require('http');

const Eureka = require('eureka-js-client').Eureka;
/**
 * Get port from environment and store in Express.
 */

const client = require("cloud-config-client");

client.load({
    endpoint: 'http://localhost:8081',
    name: 'nodejsconf',
    context: process.env
})
    .then(config => {
        // config loaded
        console.log(config)
        console.log(config._properties['server.port'])
        var port = normalizePort(config._properties['server.port']);
        app.set('port', port);

        /**
         * Create HTTP server.
         */

        var server = http.createServer(app);

        /**
         * Listen on provided port, on all network interfaces.
         */

        server.listen(port);
        server.on('error', onError);
        server.on('listening', onListening);

        /**
         * Normalize a port into a number, string, or false.
         */

        function normalizePort(val) {
            var port = parseInt(val, 10);

            if (isNaN(port)) {
                // named pipe
                return val;
            }

            if (port >= 0) {
                // port number
                return port;
            }

            return false;
        }

        /**
         * Event listener for HTTP server "error" event.
         */

        function onError(error) {
            if (error.syscall !== 'listen') {
                throw error;
            }

            var bind = typeof port === 'string'
                ? 'Pipe ' + port
                : 'Port ' + port;

            // handle specific listen errors with friendly messages
            switch (error.code) {
                case 'EACCES':
                    console.error(bind + ' requires elevated privileges');
                    process.exit(1);
                    break;
                case 'EADDRINUSE':
                    console.error(bind + ' is already in use');
                    process.exit(1);
                    break;
                default:
                    throw error;
            }
        }

        /**
         * Event listener for HTTP server "listening" event.
         */

        function onListening() {
            var addr = server.address();
            var bind = typeof addr === 'string'
                ? 'pipe ' + addr
                : 'port ' + addr.port;
            debug('Listening on ' + bind);

            // example configuration
            const clientEureka = new Eureka({
                // application instance information
                instance: {
                    app: 'nodejsconf',
                    hostName: 'localhost',
                    ipAddr: '127.0.0.1',
                    statusPageUrl: 'http://localhost:3003',
                    // healthCheckUrl: 'http://localhost:3003/health',
                    port: {
                        '$': 3003,
                        '@enabled': 'true',
                    },
                    // statusPageUrl: 'http://localhost:3003',
                    vipAddress: 'nodejsconf',
                    dataCenterInfo: {
                        '@class': 'com.netflix.appinfo.InstanceInfo$DefaultDataCenterInfo',
                        name: 'MyOwn',
                    },
                    // registerWithEureka: true,
                    // fetchRegistry: true
                },
                eureka: {
                    // localhost:8082
                    // eureka server host / port
                    host: 'localhost',
                    port: 8082,
                    servicePath: '/eureka/apps/'
                },
            });


            clientEureka.start();
        }

    }).catch(console.error)



